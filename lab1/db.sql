-- CREATE DATABASE faculty_sport WITH ENCODING 'UTF8';

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'level_enum') THEN
    CREATE TYPE level_enum AS ENUM ('beginner','intermediate','advanced');
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'weekday_enum') THEN
    CREATE TYPE weekday_enum AS ENUM ('Mon','Tue','Wed','Thu','Fri','Sat','Sun');
  END IF;
END$$;


CREATE TABLE IF NOT EXISTS students (
  student_id  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name  VARCHAR(80)  NOT NULL,
  last_name   VARCHAR(80)  NOT NULL,
  group_code  VARCHAR(32)  NOT NULL,
  birth_date  DATE         NOT NULL,
  phone       VARCHAR(32)
);

CREATE TABLE IF NOT EXISTS instructors (
  instructor_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name    VARCHAR(80)  NOT NULL,
  last_name     VARCHAR(80)  NOT NULL,
  department    VARCHAR(120) NOT NULL,
  phone         VARCHAR(32)
);

CREATE TABLE IF NOT EXISTS sections (
  section_id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name          VARCHAR(120) NOT NULL,
  level         level_enum   NOT NULL DEFAULT 'beginner',
  instructor_id INT,
  CONSTRAINT fk_sections_instructor
    FOREIGN KEY (instructor_id)
    REFERENCES instructors(instructor_id)
    ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS section_schedule (
  schedule_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id  INT          NOT NULL,
  weekday     weekday_enum NOT NULL,
  start_time  TIME         NOT NULL,
  end_time    TIME         NOT NULL,
  location    VARCHAR(120) NOT NULL,
  CONSTRAINT fk_schedule_section
    FOREIGN KEY (section_id)
    REFERENCES sections(section_id)
    ON DELETE CASCADE,
  CONSTRAINT chk_schedule_time
    CHECK (end_time > start_time)
);

CREATE TABLE IF NOT EXISTS memberships (
  membership_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  student_id    INT  NOT NULL,
  section_id    INT  NOT NULL,
  joined_at     DATE NOT NULL,
  CONSTRAINT fk_memberships_student
    FOREIGN KEY (student_id)
    REFERENCES students(student_id)
    ON DELETE CASCADE,
  CONSTRAINT fk_memberships_section
    FOREIGN KEY (section_id)
    REFERENCES sections(section_id)
    ON DELETE CASCADE,
  CONSTRAINT uniq_student_section UNIQUE (student_id, section_id)
);

CREATE TABLE IF NOT EXISTS competitions (
  competition_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title          VARCHAR(160) NOT NULL,
  held_on        DATE         NOT NULL,
  venue          VARCHAR(160) NOT NULL,
  section_id     INT,
  CONSTRAINT fk_competitions_section
    FOREIGN KEY (section_id)
    REFERENCES sections(section_id)
    ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS competition_participants (
  cp_id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  competition_id INT NOT NULL,
  student_id     INT NOT NULL,
  result_notes   VARCHAR(200),
  CONSTRAINT fk_cp_competition
    FOREIGN KEY (competition_id)
    REFERENCES competitions(competition_id)
    ON DELETE CASCADE,
  CONSTRAINT fk_cp_student
    FOREIGN KEY (student_id)
    REFERENCES students(student_id)
    ON DELETE CASCADE,
  CONSTRAINT uniq_competition_student UNIQUE (competition_id, student_id)
);

-- індекси для пошуку/джойнів
CREATE INDEX IF NOT EXISTS idx_students_group ON students(group_code);
CREATE INDEX IF NOT EXISTS idx_sections_name ON sections(name);
CREATE INDEX IF NOT EXISTS idx_schedule_section_weekday ON section_schedule(section_id, weekday, start_time);
CREATE INDEX IF NOT EXISTS idx_memberships_student ON memberships(student_id);
CREATE INDEX IF NOT EXISTS idx_memberships_section ON memberships(section_id);
CREATE INDEX IF NOT EXISTS idx_competitions_held_on ON competitions(held_on);
